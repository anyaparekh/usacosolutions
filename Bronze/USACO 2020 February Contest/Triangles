/*
USACO 2020 February Contest, Bronze
Problem 1. Triangles
*/

import java.io.*;
import java.util.*;
import java.lang.*;

class triangles {
   public static void main(String[] args) throws IOException
   {
      BufferedReader br = new BufferedReader(new FileReader("triangles.in"));
      PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("triangles.out")));
      StringTokenizer st = new StringTokenizer(br.readLine());
      int n = Integer.parseInt(st.nextToken());
      long max = 0;
      int[][] narray = new int[n][2];
      for(int x = 0; x < n; x++)
      {
         st = new StringTokenizer(br.readLine());
         narray[x][0] = Integer.parseInt(st.nextToken());
         narray[x][1] = Integer.parseInt(st.nextToken());
      }
      for(int i = 0; i < n; i++)
      {
         for(int j = i + 1; j < n; j++)
         {
            for(int k = j + 1; k < n; k++)
            {
               if(narray[i][0] == narray[j][0] || narray[j][0] == narray[k][0] || narray[i][0] == narray[k][0])
               {
                  if(narray[i][1] == narray[j][1] || narray[j][1] == narray[k][1] || narray[i][1] == narray[k][1])
                  {
                     int xdist = 0;
                     int ydist = 0;
                     if(narray[i][0] == narray[j][0])
                        ydist = Math.abs(narray[i][1] - narray[j][1]);
                     if(narray[i][0] == narray[k][0])
                        ydist = Math.abs(narray[i][1] - narray[k][1]);
                     if(narray[j][0] == narray[k][0])
                        ydist = Math.abs(narray[j][1] - narray[k][1]);
                     if(narray[i][1] == narray[j][1])
                        xdist = Math.abs(narray[i][0] - narray[j][0]);
                     if(narray[i][1] == narray[k][1])
                        xdist = Math.abs(narray[i][0] - narray[k][0]);
                     if(narray[j][1] == narray[k][1])
                        xdist = Math.abs(narray[j][0] - narray[k][0]);
                     long l = xdist*ydist;
                     max = Math.max(l, max);
                  }
               }
            }
         }
      }
      out.println(max);
      out.close();
   }
}
