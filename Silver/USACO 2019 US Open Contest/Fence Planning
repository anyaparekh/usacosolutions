/*
USACO 2019 US Open Contest, Silver
Problem 3. Fence Planning
*/

import java.io.*;
import java.util.*;
import java.lang.*;
 
class fenceplan3
{
   public static void main(String[] args) throws IOException
   {
      BufferedReader br = new BufferedReader(new FileReader("fenceplan.in"));
      PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("fenceplan.out")));
      StringTokenizer st = new StringTokenizer(br.readLine());
      int n = Integer.parseInt(st.nextToken());
      int m = Integer.parseInt(st.nextToken());
      disjoint set = new disjoint(n);
      int[][] array = new int[n][2];
      for(int w = 0; w < n; w++)
      {
         st = new StringTokenizer(br.readLine());
         array[w][0] = Integer.parseInt(st.nextToken());
         array[w][1] = Integer.parseInt(st.nextToken());
      }
      for(int x = 0; x < m; x++)
      {
         st = new StringTokenizer(br.readLine());
         set.union(Integer.parseInt(st.nextToken())-1, Integer.parseInt(st.nextToken())-1);
      }
      int[] arr = new int[n];
      for(int y = 0; y < n; y++)
         arr[y] = set.findSet(y);
      TreeMap<Integer, ArrayList<Integer>> map = new TreeMap<Integer, ArrayList<Integer>>();
      int index = 0;
      for(int in : arr)
      {
         if(!map.containsKey(in))
         {
            ArrayList<Integer> al = new ArrayList<Integer>();
            al.add(index);
            map.put(in, al);
         }
         else
            map.get(in).add(index);
         index++;
      }
      int toRet = Integer.MAX_VALUE;
      for(int key : map.keySet())
      {
         int minx = Integer.MAX_VALUE;
         int miny = Integer.MAX_VALUE;
         int maxx = 0;
         int maxy = 0;
         for(int z = 0; z < map.get(key).size(); z++)
         {
            int xcoor = array[map.get(key).get(z)][0];
            int ycoor = array[map.get(key).get(z)][1];
            if(xcoor < minx)
               minx = xcoor;
            if(xcoor > maxx)
               maxx = xcoor;
            if(ycoor < miny)
               miny = ycoor;
            if(ycoor > maxy)
               maxy = ycoor;
         }
         if((maxy - miny) * 2 + (maxx - minx) * 2 < toRet)
            toRet = (maxy - miny) * 2 + (maxx - minx) * 2;
      }
      out.println(toRet);
      out.close();
   }
   static class disjoint
   {
      public int[] arr;
      public disjoint(int i)
      {
         arr = new int[i];
         for(int x = 0; x < i; x++)
            arr[x] = x;
      }
      public void union(int x, int y)
      {
         int i1 = findSet(x);
         int i2 = findSet(y);
         if(i1 == i2)
            return;
         arr[i2] = i1;
      }
      public int findSet(int x)
      {
         if(x == arr[x])
            return x;
         return arr[x] = findSet(arr[x]);
      }
   }
}
